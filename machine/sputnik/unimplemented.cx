
#include "sputnikvm.h"

int32_t sputnikvm_is_implemented() { return 0; }

__attribute__((noreturn)) void fatal(const char *text) {
	fputs(text,stderr);
	fputs("\n",stderr);
	abort();
}

#define UNIMPL(Signature) Signature { fatal(#Signature " is not implemented yet"); }

UNIMPL(int sputnikvm_fire(void* ctx))

UNIMPL(const void* sputnikvm_context(
    int32_t     callOrCreate,
    const char *gas,
    const char *price,
    const char *value,
    const char *caller,
    const char *target,
    const void *bytes,
    size_t      bytesLen,
    const char *gasLimit,
    const char *coinbase,
    int32_t     fork,
    const char *blocknum,
    uint64_t    time,
    const char *difficulty))

UNIMPL(const char* sputnikvm_req_address(void *ctx))
UNIMPL(const char* sputnikvm_req_hash(void *ctx))
UNIMPL(uint64_t sputnikvm_req_blocknum(void *ctx))
UNIMPL(void sputnikvm_commit_account(void *ctx,const char *address,uint64_t nonce,const char *balance,const void *bytes,size_t bytes_len))
UNIMPL(void sputnikvm_commit_code(void *ctx,const char *address,const void *bytes,size_t bytes_len))
